{"version":3,"sources":["dashboard/components/assets/postgres.png","dashboard/components/header.jsx","dashboard/scripts.js","dashboard/components/ModalComponents.jsx","dashboard/components/Configure.jsx","dashboard/components/DataSources.jsx","dashboard/components/DBView.jsx","dashboard/components/Body.jsx","dashboard/main.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","react_default","a","createElement","AppBar","position","color","style","width","Toolbar","Button","onClick","handler","paddingLeft","variant","React","Component","URL","testDataSource","data","callback","fetch","headers","Content-Type","Accept","mode","method","body","JSON","stringify","then","json","serverErr","payload","catch","err","DBList","name","icon","TestSuccess","margin","textAlign","Typography","DBConfigure","dbSourceName","dbHost","dbPort","dbUser","dbPassword","dbName","errorMessage","dbType","_this3","object","skipParameter","key","nullChecker","setState","dbMetadata","response","connectionErr","stepFunction","_this4","Divider","padding","TextField","label","onChange","e","target","value","type","testConnection","Settings","SelectDatabase","_this5","selected","_this6","Paper","Input","placeholder","IconButton","Search","marginTop","map","k","v","Card","CardContent","esm_Dashboard","ArrowRightSharp","ConfigureView","db","_id","userID","refresh","console","log","alert","result","toggleHandler","paylaod","marginLeft","Delete","NetworkCheck","steps","AddNewSourceModal","canShow","step","dbInfo","incrementStep","bind","assertThisInitialized","metadata","closeModal","Modal","open","overflow","height","display","Stepper","activeStep","Step","StepLabel","ModalComponents_SelectDatabase","ModalComponents_DBConfigure","ModalComponents_TestSuccess","bottom","right","disabled","Add","requestObject","createDataSource","DataSourcesGrid","Grid","container","spacing","dataSources","item","xs","src","postgres","DataSource","canShowModal","toggleGrid","viewData","turnOffGird","_this7","refreshInformation","_this8","openModal","DataSources_DataSourcesGrid","Configure","DataSources_AddNewSourceModal","demoTables","demoViews","SideView","className","id","role","aria-orientation","data-toggle","aria-controls","aria-selected","href","TableViewContainer","fetchFrom","dummyData","fields","row","DBView","DBView_SideView","class","DBView_TableViewContainer","Demo1","Body","choice","Body_Demo1","DataSources","components_DBView","Dashboard","componetToShow","number","header","components_Body","document","getElementById","backgroundColor","ReactDOM","render","main"],"mappings":"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","file":"static/js/main.30fffb9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/postgres.84b54ac3.png\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppBar, Button, Toolbar } from '@material-ui/core'\n\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n                <AppBar position = \"static\" color = \"default\" style = {{width : '100%'}}>\n                    <Toolbar>\n                        {\n                            //all dropdown menus are added here \n                            \n                        }\n                       <Button onClick = {() => {\n                           this.props.handler(0)\n                       }}>Dashboards</Button>\n                       <div style = {{paddingLeft : '40px'}}><Button onClick = {() => {\n                           this.props.handler(1)\n                       }}>Data Sources</Button> </div>\n                         <div style = {{paddingLeft : '40px'}}><Button onClick = {() => {\n                           this.props.handler(2)\n                       }}>Query</Button> </div>\n                       <div style = {{paddingLeft : '40px'}}><Button variant = \"contained\" color = \"primary\">Create</Button> </div>\n                    </Toolbar> \n                </AppBar> \n        )\n    }\n}\n\nexport default Header","\n\nvar URL = 'http://192.168.1.17:5000'\n\nfunction testDataSource(data, callback) {\n    fetch(URL + \"/testConnection\", {\n        headers : {\n            \"Content-Type\" : \"application/json\",\n            \"Accept\" : \"application/json\"\n        }, mode : 'cors', \n        method : 'post',\n        body : JSON.stringify(data)\n    }).then((data) => data.json()).then((data) => callback({serverErr : false, payload : data})).catch((err) => callback({serverErr : true, payload : err}))\n}\n\nfunction createDataSource(data, callback) {\n    fetch(URL + \"/createDataSource\", {\n        headers : {\n            \"Content-Type\" : \"application/json\",\n            \"Accept\" : \"application/json\"\n        }, mode : 'cors', \n        method : 'post',\n        body : JSON.stringify(data)\n    }).then((data) => data.json()).then((data) => callback({serverErr : false, payload : data})).catch((err) => callback({serverErr : true, payload : err}))\n}\n\nfunction queryDataSources(data, callback) {\n    fetch(URL + \"/getDataSource\", {\n        headers : {\n            \"Content-Type\" : \"application/json\",\n            \"Accept\" : \"application/json\"\n        }, mode : 'cors',\n        method : 'post',\n        body : JSON.stringify(data)\n    }).then((data) => data.json()).then((data) => callback({serverErr : false, payload : data})).catch((err) => callback({serverErr : true, payload : err}))\n}\n\nfunction updateDataSource(data, callback) {\n    fetch(URL + \"/updateDataSource\", {\n        headers : {\n            \"Content-Type\" : \"application/json\",\n            \"Accept\" : \"application/json\"\n        }, mode : 'cors',\n        method : 'post',\n        body : JSON.stringify(data)\n    }).then((data) => data.json()).then((data) => callback({serverErr : false, payload : data})).catch((err) => callback({serverErr : true, payload : err}))\n}\n\nfunction deleteDataSource(data, callback) {\n    fetch(URL + \"/deleteDataSource\", {\n        headers : {\n            \"Content-Type\" : \"application/json\",\n            \"Accept\" : \"application/json\"\n        }, mode : 'cors',\n        method : 'post',\n        body : JSON.stringify(data)\n    }).then((data) => data.json()).then((data) => callback({serverErr : false, payload : data})).catch((err) => callback({serverErr : true, paylaod : err}))\n}\n\nexport {testDataSource, createDataSource, queryDataSources, updateDataSource, deleteDataSource}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {IconButton, Input, Paper, Card, CardContent, Typography, CardMedia, TextField, Divider, Button } from '@material-ui/core'\nimport {Search, Dashboard, ArrowRight, ArrowRightSharp, Settings} from '@material-ui/icons'\nimport postgresIcon from './assets/postgres.png'\nimport {testDataSource} from '../scripts';\n\n\n/*\n    Add - TODO: \n*/\n\n\n\nvar DBList = [\n    {name : \"Postgres\", icon : \"https://en.wikipedia.org/wiki/PostgreSQL#/media/File:Postgresql_elephant.svg\"}\n]\n\nfunction nullChecker(object, skipParameter) {\n    for(var key in object) {\n        if((key !== skipParameter) && (object[key] === '' || (object[key] === null)))\n            return false\n    }\n    return true\n}\n\n\nclass TestSuccess extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div style = {{margin : '20px auto', textAlign : 'center'}}>\n                <Typography variant = \"h5\">\n                    Connection established\n                </Typography>\n                <p>Connection to the database has been established, now you can click on <strong>+ Create</strong> to save the data source.</p>\n            </div>\n        )\n    }\n}\n\nclass DBConfigure extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            dbSourceName : '',\n            dbHost : '',\n            dbPort : '',\n            dbUser : '',\n            dbPassword : '',\n            dbName : '',\n            errorMessage : ' '\n        }\n        this.dbType = this.props.dbType\n    }\n\n    testConnection() {\n        if(!nullChecker(this.state, \"dbPassword\")){\n            this.setState({errorMessage : \"Provide all the parameters\"})\n        }\n        else\n\n        testDataSource({\n            dbType : this.dbType,\n            dbMetadata : this.state\n        }, (response) => {\n            if(response.serverErr) this.setState({errorMessage : \"Server connection failed...\"})\n            else {\n                if(response.payload.connectionErr) this.setState({errorMessage : \"Data source not found, make sure parameters are correct.\"})\n                else this.props.stepFunction(this.state)\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                 <Divider />\n                <div style = {{padding : '30px'}}>\n                <TextField label = \"Name of Data Source *\" onChange = {(e) => this.setState({dbSourceName : e.target.value})} value = {this.state.dbSourceName} margin = \"normal\" style = {{width : '100%'}} />\n                <Divider />\n                <div>\n                   <TextField label = \"Database Host URL*\" onChange = {(e) => {\n                       this.setState({dbHost : e.target.value})\n                   }} value = {this.state.dbHost} margin = \"normal\" style = {{width : '100%'}}/> \n                </div>\n                <div>\n                   <TextField label = \"Database Port Number *\" value = {this.state.dbPort} margin = \"normal\" onChange = {(e) => {\n                       this.setState({dbPort : e.target.value})\n                   }} style = {{width : '100%'}} />\n                </div>\n                <div>\n                   <TextField label = \"Database User Name *\" value = {this.state.dbUser} margin = \"normal\" onChange = {(e) => {\n                       this.setState({dbUser : e.target.value})\n                   }} style = {{width : '100%'}}  />\n                </div>\n                <div>\n                   <TextField label = \"Database Password \" value = {this.state.dbPassword} margin = \"normal\" onChange = {(e) => {\n                       this.setState({dbPassword : e.target.value})\n                   }} type = \"password\" style = {{width : '100%'}} />\n                </div>\n                <div>\n                   <TextField label = \"Database Name *\" value = {this.state.dbName} margin = \"normal\" onChange = {(e) => {\n                       this.setState({dbName : e.target.value})\n                   }} style = {{width : '100%'}} />\n                </div>\n                <div style = {{margin : '20px auto'}}>\n                    <Button variant = \"contained\" color = \"primary\" onClick = {() => {\n                        this.testConnection()\n                    }}><Settings />  Configure</Button>\n                </div>\n                <div style = {{margin : '10px auto'}}>\n                    <p style = {{color : 'red'}}>{this.state.errorMessage}</p>\n                </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nclass SelectDatabase extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {selected : false}\n    }\n\n    render() {\n        return (\n            <div style = {{margin : '10px auto', width : '90%'}}>\n                 <Paper style = {{padding : '10px'}}>\n                    <span><Input\n                        placeholder=\"Search for the database\" style = {{width : '90%'}}\n                    />\n                    <IconButton style = {{margin : '10px auto'}}>\n                        <Search />\n                    </IconButton>\n                </span>\n                 </Paper>\n                 <div style = {{marginTop : '20px'}}>\n                    <div>\n                        {\n                            DBList.map((k, v) => {\n                                return (\n                                    <Card style = {{margin : '10px auto'}}>\n                                        <CardContent>\n                                          <span>\n                                          <Typography variant = \"h6\"><Dashboard />  {k.name} <IconButton onClick = {() => {\n                                              this.props.stepFunction({dbName : k.name})\n                                          }}>\n                                              <ArrowRightSharp />\n                                          </IconButton></Typography>\n                                          </span>\n                                        </CardContent>\n                                    </Card>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {SelectDatabase, DBConfigure, TestSuccess} ;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { IconButton, Input, Paper, Card, CardContent, Typography, CardMedia, TextField, Divider, Button } from '@material-ui/core'\nimport { Search, Dashboard, ArrowRight, ArrowRightSharp, Settings, Delete, NetworkCheck} from '@material-ui/icons'\nimport { testDataSource, updateDataSource, deleteDataSource } from '../scripts'\n\n\nfunction nullChecker(object, skipParameter) {\n    for (var key in object) {\n        if ((key !== skipParameter) && (object[key] === '' || object[key] === null)) return false;\n    }\n    return true\n}\n\nclass ConfigureView extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            dbSourceName: '',\n            dbHost: '',\n            dbPort: '',\n            dbUser: '',\n            dbPassword: '',\n            dbName: '',\n            errorMessage: ' '\n        }\n    }\n\n    refresh() {\n        this.setState({\n            dbSourceName: this.props.db.dbSourceName,\n            dbHost: this.props.db.dbHost,\n            dbPort: this.props.db.dbPort,\n            dbUser: this.props.db.dbUser,\n            dbPassword: this.props.db.dbPassword,\n            dbName: this.props.db.dbName\n        })\n\n        this.dbType = this.props.dbType\n        this._id = this.props._id\n        this.userID = this.props.userID\n    }\n\n\n    componentWillMount() {\n       this.refresh()\n    }\n\n\n    testConnection() {\n        if (!nullChecker(this.state, \"dbPassword\")) {\n            this.setState({ errorMessage: \"Provide all the parameters\" })\n        }\n        else {\n            console.log(this.state)\n            testDataSource({\n                dbType: this.dbType,\n                dbMetadata: this.state\n            }, (response) => {\n                if (response.serverErr) this.setState({ errorMessage: \"Server connection failed...\" + JSON.stringify(response)})\n                else {\n                    if (response.payload.connectionErr) this.setState({ errorMessage: \"Data source not found, make sure parameters are correct.\" })\n                    else alert(\"Data Source test passed!\")\n                }\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <Divider />\n                    <div style={{ padding: '30px' }}>\n                        <TextField label=\"Name of Data Source *\" onChange = {(e) => this.setState({ dbSourceName: e.target.value })} value={this.state.dbSourceName} margin=\"normal\" style={{ width: '100%' }} />\n                        <Divider />\n                        <div>\n                            <TextField label=\"Database Host URL*\" onChange={(e) => {\n                                this.setState({ dbHost: e.target.value })\n                            }} value={this.state.dbHost} margin=\"normal\" style={{ width: '100%' }} />\n                        </div>\n                        <div>\n                            <TextField label=\"Database Port Number *\" value={this.state.dbPort} margin=\"normal\" onChange={(e) => {\n                                this.setState({ dbPort: e.target.value })\n                            }} style={{ width: '100%' }} />\n                        </div>\n                        <div>\n                            <TextField label=\"Database User Name *\" value={this.state.dbUser} margin=\"normal\" onChange={(e) => {\n                                this.setState({ dbUser: e.target.value })\n                            }} style={{ width: '100%' }} />\n                        </div>\n                        <div>\n                            <TextField label=\"Database Password \" value={this.state.dbPassword} margin=\"normal\" onChange={(e) => {\n                                this.setState({ dbPassword: e.target.value })\n                            }} type = \"password\" style={{ width: '100%' }} />\n                        </div>\n                        <div>\n                            <TextField label=\"Database Name *\" value={this.state.dbName} margin=\"normal\" onChange={(e) => {\n                                this.setState({ dbName: e.target.value })\n                            }} style={{ width: '100%'}} />\n                        </div>\n                        <div style={{ margin: '20px auto' }}>\n                            <Button variant=\"contained\" color=\"primary\" onClick = {() => {\n                                updateDataSource({\n                                    _id : this._id,\n                                    dbType : this.dbType,\n                                    userID : this.userID,\n                                    dbMetadata : this.state\n                                }, (result) => {\n                                    if(result.serverErr) alert(\"Server crashed\")\n                                    else {\n                                        alert(\"Updated Data Source!\")\n                                        this.refresh()\n                                    }\n                                })\n                            }} style = {{margin : '20px'}}><Settings />  Save</Button>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => {\n                                  deleteDataSource({\n                                    _id : this._id,\n                                    dbType : this.dbType,\n                                    userID : this.userID,\n                                    dbMetadata : this.state\n                                  }, (result) => {\n                                      this.props.toggleHandler({})\n                                  })                 \n                            }} style = {{marginLeft : '20px'}}><Delete />  Delete</Button>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => {\n                                this.testConnection()\n                            }} style = {{marginLeft : '20px'}}><NetworkCheck />  Test Connection</Button>\n                        </div>\n                        <div style={{ margin: '10px auto' }}>\n                            <p style={{ color: 'red' }}>{this.state.errorMessage}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default ConfigureView","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Typography, Divider, Button, Paper, Modal, Card, Stepper, Step, StepLabel, Grid} from '@material-ui/core'\nimport { Add } from '@material-ui/icons'\nimport {SelectDatabase, DBConfigure, TestSuccess} from './ModalComponents';\nimport {createDataSource, queryDataSources} from '../scripts'\nimport postgres from './assets/postgres.png'\nimport ConfigureView from './Configure';\n\n\nvar steps = [\"Select\", \"Configure\", \"Test\"]\n\nclass AddNewSourceModal extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            canShow : false,\n            step : 0,\n            dbName : '',\n            dbInfo : {},\n            userID : this.props.userID\n        }\n        this.incrementStep = this.incrementStep.bind(this)\n    }\n\n    incrementStep(metadata) {\n        // eslint-disable-next-line default-case\n        switch(this.state.step) {\n            case 0 : this.setState({dbName : metadata.dbName}); break;\n            case 1 : this.setState({dbInfo : metadata}); break;\n        }\n        this.setState({step : this.state.step + 1})\n    }\n\n    createDataSource(object) {\n        createDataSource(object, (result) => {\n            if(result.serverErr) alert(\"Server Error\")\n            else {\n                if(result.payload.connectionErr) alert(\"Creating Data source failed. Try again later\")\n                else {\n                    this.props.closeModal()\n                }\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal open = {this.props.canShow} style = {{ position:'absolute', overflow:'scroll', height:'100%', display:'block'}}>\n                    <Paper style = {{width : '40%', margin : '10px auto' , height : '850px', position : 'relative'}}>\n                        <div style = {{padding : '20px'}}>\n                            <Typography variant = \"h6\">Create a new Data Source</Typography>\n                        </div>\n\n                        <div style = {{margin : '20px auto'}}>\n                            <Stepper activeStep = {this.state.step}>\n                                {\n                                    steps.map((k, v) => {\n                                       return (\n                                        <Step key = {k}>\n                                            <StepLabel>{k}</StepLabel>\n                                        </Step>\n                                       )\n                                    })\n                                }\n                            </Stepper>\n                        </div>\n                        <div style = {{marginTop : '20px'}}>\n                            {\n                                (this.state.step === 0) && (\n                                    <SelectDatabase stepFunction = {this.incrementStep}/>\n                                )\n                            }{\n                                (this.state.step === 1) && (\n                                    <DBConfigure stepFunction = {this.incrementStep} dbType = {this.state.dbName}/>\n                                )\n                            }{\n                                (this.state.step === 2) && (\n                                    <TestSuccess stepFunction = {this.incrementStep} />\n                                )\n                            }\n                        </div>\n\n                        <div style = {{position : 'absolute', bottom : '0px', right : '0px', padding : '30px'}}>\n                            <div style = {{textAlign : 'right'}}>\n                                <Button variant = \"contained\" color = \"primary\" onClick = {() => {\n                                    this.props.closeModal()\n                                }}>Cancel</Button>\n                                {\n                                    (this.state.step === 0 || this.state.step === 1) && (\n                                        <Button style = {{marginLeft : '20px'}} variant = \"contained\" color = \"primary\" disabled><Add /> Create</Button>\n                                    ) \n                                }\n                                {\n                                    (this.state.step === 2) && (\n                                        <Button style = {{marginLeft : '20px'}} variant = \"contained\" color = \"primary\" onClick = {() => {\n                                            var requestObject = {\n                                                dbType : this.state.dbName,\n                                                dbMetadata : this.state.dbInfo,\n                                                userID : this.state.userID\n                                            }\n                                            this.createDataSource(requestObject)\n                                        }}><Add /> Save</Button>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Paper>\n                </Modal>\n            </div>\n        )\n    }\n}\n\n\nclass DataSourcesGrid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container spacing = {3}>\n                    {\n                        this.props.dataSources.map((k, v) => {\n                            return (\n                                <Grid item xs = {4} onClick = {() => {\n                                    this.props.toggleHandler(k)\n                                }}>\n                                    <Paper style = {{margin : '5px auto', padding : '10px'}}>\n                                        <Grid container spacing = {3}>\n                                            <Grid item xs = {4} style = {{padding : '10px', textAlign : 'center'}}>\n                                                <img src = {postgres} width = \"50px\" height = \"50px\" style = {{margin : '10px auto'}} />\n                                            </Grid>\n                                             <Grid item xs = {8} style = {{padding : '10px'}}>\n                                                <Typography variant = \"h6\">{k.dbMetadata.dbSourceName}</Typography>\n                                                <Divider />\n                                                <Typography variant = \"caption\">{k.dbMetadata.dbHost + \":\" + k.dbMetadata.dbPort}</Typography>\n                                                <div>\n                                                  <Typography variant = \"caption\">{k.dbMetadata.dbName}</Typography>\n                                                </div>\n                                            </Grid>\n                                        </Grid>\n                                    </Paper>\n                                </Grid>\n                            )\n                        })\n                    }\n                </Grid>\n            </div>\n        )\n    }\n}\n\n\nclass DataSource extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            canShowModal : false,\n            userID : '12345',\n            dataSources : [],\n            toggleGrid : false,\n            viewData : {}\n        }\n        this.toggleHandler = this.toggleHandler.bind(this)\n        this.closeModal = this.closeModal.bind(this)\n        this.turnOffGird = this.turnOffGird.bind(this)\n    }\n\n    refreshInformation() {\n        queryDataSources({\"userID\" : this.state.userID}, (result) => {\n            console.log(result)\n            if(!result.serverErr) this.setState({dataSources : result.payload})\n        })\n    }\n\n    turnOffGird() {\n        this.setState({toggleGrid : false})\n        this.setState({viewData : {}})\n        this.refreshInformation()\n    }\n\n    toggleHandler(metadata) {\n        this.setState({viewData : metadata})\n        this.setState({toggleGrid : !this.state.toggleGrid})\n    }\n\n    componentWillMount() {\n      this.refreshInformation()\n    }\n\n    closeModal() {\n        this.setState({canShowModal : false})\n        this.refreshInformation()\n    }\n\n    openModal() {\n        this.setState({canShowModal : true})\n    }\n\n    render() {\n        return (\n            <div style={{ textAlign: 'center' }}>\n                <div style={{ width: '70%', textAlign: 'left', margin : '20px auto' }}>\n                    <Typography variant=\"h5\">Data Sources</Typography>\n                    <Divider />\n                    <div style={{ marginTop :'30px', paddingLeft : '20px'}}>\n                        <Button variant=\"contained\" color=\"primary\" onClick = {() => {\n                            this.openModal()\n                        }}><Add /> New Data Source</Button>\n                    </div>\n                    <div style = {{marginTop : '30px'}}>\n                        <Paper style = {{padding : '40px'}}>\n                           {\n                               (!this.state.toggleGrid) && (\n                                    <DataSourcesGrid dataSources = {this.state.dataSources} toggleHandler = {this.toggleHandler} />\n                               )\n                           }\n                           {\n                               (this.state.toggleGrid) && (\n                                   <ConfigureView _id = {this.state.viewData._id} userID = {this.state.userID} db = {this.state.viewData.dbMetadata} toggleHandler= {this.turnOffGird} />\n                                )\n                           }\n                        </Paper>\n                    </div>\n                </div>\n                <AddNewSourceModal canShow = {this.state.canShowModal} closeModal = {this.closeModal} userID = {this.state.userID}/>\n            </div>\n        )\n    }\n}\n\nexport default DataSource","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Table, TableHead, TableRow, TableFooter} from '@material-ui/core'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './assets/styles.css'\nimport dummyData from '../tableData.json'\n\nvar demoTables = ['Products', 'Customers', 'Admins', 'Transactions']\nvar demoViews = ['Total Weekly Sales', 'Total Daily Sales', 'Total Daily Customers']\n\nclass SideView extends React.Component {\n     render() {\n         return (\n             <div className = \"sidebar_dbview\">\n                 <div className=\"nav flex-column nav-pills\" id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\n                    <p><strong>Tables</strong></p>\n                    {\n                        demoTables.map((k,v) => {\n                            return (\n                              <a className= {\"nav-link\" + ((v === 0)?\" active\" : \" \")} id=\"v-pills-home-tab\" data-toggle=\"pill\" role=\"tab\" aria-controls=\"v-pills-home\" aria-selected=\"true\">{k}</a>\n                            )\n                        })\n                    }\n                    <p><strong>Views</strong></p>\n                    {\n                        demoViews.map((k,v) => {\n                            return (\n                                <a className={\"nav-link\" + ((v === 0)?\" active\" : \" \")} id=\"v-pills-home-tab\" data-toggle=\"pill\" href=\"#v-pills-home\" role=\"tab\" aria-controls=\"v-pills-home\" aria-selected=\"true\">{k}</a>\n                            )\n                        })\n                    }\n\n                 </div>\n             </div>\n         )\n     }\n}\n\nclass TableViewContainer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            fetchFrom : \"Admins\"\n        }\n    }\n\n    render() {\n        return (\n            <div style = {{margin : '10px auto', padding : '10px'}}>\n                <table className = \"table\">\n                    <thead className = \"thead-dark\">\n                        <tr>\n                        {\n                            dummyData[this.state.fetchFrom].fields.map((k,v) => {\n                               return (<th>{k}</th>)\n                            })\n                        }\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            dummyData[this.state.fetchFrom].data.map((row,v) => {\n                                return (\n                                    <tr>\n                                        {\n                                            dummyData[this.state.fetchFrom].fields.map((k,v) => {\n                                                return (<td>{row[k]}</td>)\n                                            })\n                                        }\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                </table>\n            </div>\n        )   \n    }\n}\n\nclass DBView extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className = \"container\">\n                    <div className = \"row\">\n                        <div className = \"col-1\">\n                           <SideView />\n                        </div>\n                        <div className = \"col-11\">\n                        <div className = \"card\">\n                            <div className = \"card-header\">\n                            <button type=\"button\" class=\"btn btn-primary\"> + New Visualization</button>\n                            </div>\n                            <div>\n                                <TableViewContainer />\n                            </div>\n                        </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DBView","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport DataSource from './DataSources';\nimport DBView from './DBView';\n\nclass Demo1 extends React.Component {\n    render() {\n        return (\n            <div>Hello 1</div>\n        )\n    }\n}\n\n\n\n\nclass Body extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n           \n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div style = {{margin : '30px auto', padding : '10px'}}>\n                    {\n                        (this.props.choice === 0) && (\n                            <Demo1 />\n                        )\n                    }\n                    {\n                        (this.props.choice === 1) && (\n                            <DataSource />\n                        )\n                    }{\n                        (this.props.choice === 2) && (\n                            <DBView />\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Body","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Button} from '@material-ui/core'\nimport Header from './components/header'\nimport Body from './components/Body';\n\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            componetToShow : 0\n        }\n        this.handler = this.handler.bind(this)    \n    }\n\n    handler(number) {\n        console.log(number)\n        this.setState({componetToShow : number})\n    }\n\n    render() {\n        return (\n            <div>\n              <Header handler = {this.handler}/>\n              <Body choice = {this.state.componetToShow}/>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Dashboard from './dashboard/main';\n\n//set the background color to grey\n\nconst BACKGROUND_COLOR = \"#FAFAFA\"\n\ndocument.getElementById('body_main').style.backgroundColor = BACKGROUND_COLOR\ndocument.getElementById('body_main').style.height = \"1000px\"\n\nReactDOM.render(\n    <Dashboard />, \n    document.getElementById('root')\n)"],"sourceRoot":""}